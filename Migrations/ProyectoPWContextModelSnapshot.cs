// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Primeruso.Models.dbModels;

#nullable disable

namespace Primeruso.Migrations
{
    [DbContext(typeof(ProyectoPWContext))]
    partial class ProyectoPWContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Primeruso.Models.dbModels.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CorreoElectr")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Correo_Electr");

                    b.Property<string>("Direccion")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("FechaNacimient")
                        .HasColumnType("datetime")
                        .HasColumnName("Fecha_Nacimient");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int")
                        .HasColumnName("ID_Usuario");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Primeruso.Models.dbModels.Comentario", b =>
                {
                    b.Property<int>("IdComentario")
                        .HasColumnType("int")
                        .HasColumnName("ID_Comentario");

                    b.Property<string>("Contenido")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int")
                        .HasColumnName("ID_Usuario");

                    b.HasKey("IdComentario");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Comentario");
                });

            modelBuilder.Entity("Primeruso.Models.dbModels.Habitacion", b =>
                {
                    b.Property<int>("IdHabitacion")
                        .HasColumnType("int")
                        .HasColumnName("ID_Habitacion");

                    b.Property<decimal>("CostoHabitacion")
                        .HasColumnType("money")
                        .HasColumnName("Costo_Habitacion");

                    b.Property<int>("IdHotel")
                        .HasColumnType("int")
                        .HasColumnName("ID_HOTEL");

                    b.Property<int>("IdTipoHabitacion")
                        .HasColumnType("int")
                        .HasColumnName("ID_Tipo_Habitacion");

                    b.Property<byte>("NumHabitacion")
                        .HasColumnType("tinyint")
                        .HasColumnName("Num_Habitacion");

                    b.HasKey("IdHabitacion");

                    b.HasIndex("IdHotel");

                    b.HasIndex("IdTipoHabitacion");

                    b.ToTable("Habitacion");
                });

            modelBuilder.Entity("Primeruso.Models.dbModels.Hotel", b =>
                {
                    b.Property<int>("IdHotel")
                        .HasColumnType("int")
                        .HasColumnName("ID_HOTEL");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NombreHotel")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Nombre_Hotel");

                    b.HasKey("IdHotel");

                    b.ToTable("HOTEL");
                });

            modelBuilder.Entity("Primeruso.Models.dbModels.Pago", b =>
                {
                    b.Property<int>("IdPago")
                        .HasColumnType("int")
                        .HasColumnName("ID_Pago");

                    b.Property<decimal>("CostoHabitacion")
                        .HasColumnType("money")
                        .HasColumnName("Costo_Habitacion");

                    b.Property<int>("IdReservacion")
                        .HasColumnType("int")
                        .HasColumnName("ID_Reservacion");

                    b.Property<int>("IdTipoPago")
                        .HasColumnType("int")
                        .HasColumnName("ID_Tipo_Pago");

                    b.HasKey("IdPago");

                    b.HasIndex("IdReservacion");

                    b.HasIndex("IdTipoPago");

                    b.ToTable("Pago");
                });

            modelBuilder.Entity("Primeruso.Models.dbModels.Reservacion", b =>
                {
                    b.Property<int>("IdReservacion")
                        .HasColumnType("int")
                        .HasColumnName("ID_Reservacion");

                    b.Property<int>("IdHabitacion")
                        .HasColumnType("int")
                        .HasColumnName("ID_Habitacion");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int")
                        .HasColumnName("ID_Usuario");

                    b.HasKey("IdReservacion");

                    b.HasIndex("IdHabitacion");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Reservacion");
                });

            modelBuilder.Entity("Primeruso.Models.dbModels.TipoDeHabitacione", b =>
                {
                    b.Property<int>("IdTipoHabitacion")
                        .HasColumnType("int")
                        .HasColumnName("ID_Tipo_Habitacion");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("IdTipoHabitacion");

                    b.ToTable("Tipo de Habitaciones");
                });

            modelBuilder.Entity("Primeruso.Models.dbModels.TipoDePago", b =>
                {
                    b.Property<int>("IdTipoPago")
                        .HasColumnType("int")
                        .HasColumnName("ID_Tipo_Pago");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("IdTipoPago");

                    b.ToTable("Tipo de pago");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Primeruso.Models.dbModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Primeruso.Models.dbModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Primeruso.Models.dbModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Primeruso.Models.dbModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Primeruso.Models.dbModels.Comentario", b =>
                {
                    b.HasOne("Primeruso.Models.dbModels.ApplicationUser", "IdUsuarioNavigation")
                        .WithMany("Comentarios")
                        .HasForeignKey("IdUsuario")
                        .IsRequired()
                        .HasConstraintName("FK_Comentario_Usuario");

                    b.Navigation("IdUsuarioNavigation");
                });

            modelBuilder.Entity("Primeruso.Models.dbModels.Habitacion", b =>
                {
                    b.HasOne("Primeruso.Models.dbModels.Hotel", "IdHotelNavigation")
                        .WithMany("Habitacions")
                        .HasForeignKey("IdHotel")
                        .IsRequired()
                        .HasConstraintName("FK_Habitacion_HOTEL");

                    b.HasOne("Primeruso.Models.dbModels.TipoDeHabitacione", "IdTipoHabitacionNavigation")
                        .WithMany("Habitacions")
                        .HasForeignKey("IdTipoHabitacion")
                        .IsRequired()
                        .HasConstraintName("FK_Habitacion_Tipo de Habitaciones");

                    b.Navigation("IdHotelNavigation");

                    b.Navigation("IdTipoHabitacionNavigation");
                });

            modelBuilder.Entity("Primeruso.Models.dbModels.Pago", b =>
                {
                    b.HasOne("Primeruso.Models.dbModels.Reservacion", "IdReservacionNavigation")
                        .WithMany("Pagos")
                        .HasForeignKey("IdReservacion")
                        .IsRequired()
                        .HasConstraintName("FK_Pago_Reservacion");

                    b.HasOne("Primeruso.Models.dbModels.TipoDePago", "IdTipoPagoNavigation")
                        .WithMany("Pagos")
                        .HasForeignKey("IdTipoPago")
                        .IsRequired()
                        .HasConstraintName("FK_Pago_Tipo de pago1");

                    b.Navigation("IdReservacionNavigation");

                    b.Navigation("IdTipoPagoNavigation");
                });

            modelBuilder.Entity("Primeruso.Models.dbModels.Reservacion", b =>
                {
                    b.HasOne("Primeruso.Models.dbModels.Habitacion", "IdHabitacionNavigation")
                        .WithMany("Reservacions")
                        .HasForeignKey("IdHabitacion")
                        .IsRequired()
                        .HasConstraintName("FK_Reservacion_Habitacion");

                    b.HasOne("Primeruso.Models.dbModels.ApplicationUser", "IdUsuarioNavigation")
                        .WithMany("Reservacions")
                        .HasForeignKey("IdUsuario")
                        .IsRequired()
                        .HasConstraintName("FK_Reservacion_Usuario");

                    b.Navigation("IdHabitacionNavigation");

                    b.Navigation("IdUsuarioNavigation");
                });

            modelBuilder.Entity("Primeruso.Models.dbModels.ApplicationUser", b =>
                {
                    b.Navigation("Comentarios");

                    b.Navigation("Reservacions");
                });

            modelBuilder.Entity("Primeruso.Models.dbModels.Habitacion", b =>
                {
                    b.Navigation("Reservacions");
                });

            modelBuilder.Entity("Primeruso.Models.dbModels.Hotel", b =>
                {
                    b.Navigation("Habitacions");
                });

            modelBuilder.Entity("Primeruso.Models.dbModels.Reservacion", b =>
                {
                    b.Navigation("Pagos");
                });

            modelBuilder.Entity("Primeruso.Models.dbModels.TipoDeHabitacione", b =>
                {
                    b.Navigation("Habitacions");
                });

            modelBuilder.Entity("Primeruso.Models.dbModels.TipoDePago", b =>
                {
                    b.Navigation("Pagos");
                });
#pragma warning restore 612, 618
        }
    }
}
